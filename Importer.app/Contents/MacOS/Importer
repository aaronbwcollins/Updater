#!/usr/bin/env python

import syslog
import xml.etree.cElementTree as ET
import requests
import PBridge
import requests
import pprint
import sys

## Testing


## Configuration
syslog.openlog('Updater')

## Functions
def error(error_message):
    print(error_message)

def login():
    authorized = False
    while not authorized:
        authview = """
        # Set window title
        *.title = Updater
        # Introductory text
        txt.type = text
        txt.default = Please Log into Casper
        txt.height = 50
        txt.width = 256
        # Add a text field
        username.type = textfield
        username.label = Username
        username.default = username
        username.width = 256
        username.tooltip = Casper Username

        # Add a password field
        password.type = password
        password.label = Password
        password.width = 256
        password.tooltip = Casper Password

        # Add a cancel button with default label
        cb.type = cancelbutton
        """

        result = PBridge.run(authview)
        if result["cb"] == "1":
            sys.exit(0)
        else:
            user = result["username"]
            pprompt = result["password"]
            creds = (user, pprompt)
            authorized = jsstest(creds)
        if not authorized:
            print("Bad credentials or unauthorized")
    return creds

def jsstest(creds):
    r = requests.get('https://zenefits.jamfcloud.com/JSSResource/computers', auth=creds)
    response = (r.status_code)
    print(response)
    return r

def get_info(match, creds):
    # Returns json of computers info
    url = 'https://zenefits.jamfcloud.com/JSSResource/computers/match/'
    sendurl = url + match
    header = {'Accept': 'application/json'}
    r = requests.get(sendurl, auth=creds, headers=header)
    response = r.json()
    return response

def activate(comp_id, auth):
    # Sets Status to Deployed
    url = 'https://zenefits.jamfcloud.com/JSSResource/computers/id/'
    sendurl = url + comp_id
    # print(sendurl)
    header = {'Content-Type': 'text/xml'}
    xml = """<?xml version="1.0" encoding="UTF-8"?>
    <computer>
        <extension_attributes>
            <attribute>
                <name>Status</name>
                <value>Deployed</value>
            </attribute>
        </extension_attributes>
    </computer>"""
    r = requests.put(sendurl, auth=auth, headers=header, data=xml).text
    # return r

def deactivate(comp_id, auth):
    url = 'https://zenefits.jamfcloud.com/JSSResource/computers/id/'
    sendurl = url + comp_id
    print(sendurl)
    header = {'Content-Type': 'text/xml'}
    xml = """<?xml version="1.0" encoding="UTF-8"?>
    <computer>
        <location>
            <real_name></real_name>
            <email_address></email_address>
            <department></department>
        </location>
        <extension_attributes>
            <attribute>
                <name>Status</name>
                <value>Legal Hold</value>
            </attribute>
        </extension_attributes>
    </computer>"""
    r = requests.put(sendurl, auth=auth, headers=header, data=xml).text
    # return r

def barcode_scan(text):
    #
    barcode_view = """
    *.title = Updater - JSS Update
    text.type = text
    """
    barcode_view += "\ntext.default = %s[return]Please Scan Barcode\n" % text
    barcode_view += """
    text.height = 50
    text.width = 256
    barcode.type = textfield
    barcode.label = 
    barcode.width = 256
    cb.type = cancelbutton

    """
    result = PBridge.run(barcode_view)
    if result["cb"] == "1":
        logger("User Canceled")
        sys.exit(0)
    return result['barcode']

def function_select():
    # Allows user to select function
    function_view="""
    *.title = Updater
    # Introductory text
    txt.type = text
    txt.default = Please select which function you would like to perform
    txt.height = 50
    txt.width = 256
    # Add a popup menu
    pop.type = popup
    pop.label = Function
    pop.width = 256
    pop.option = Activate
    pop.option = Deactivate
    pop.default = Activate
    # Add a cancel button with default label
    cb.type = cancelbutton
    """
    selection = PBridge.run(function_view)
    function = ""
    if selection["cb"] == "1":
        sys.exit(0)
    elif selection["pop"] == "Activate":
        function = selection["pop"]
    elif selection["pop"] == "Deactivate":
        function = selection["pop"]
    return function

def logger(message):
    syslog.syslog(syslog.LOG_ALERT, message)

def main_loop():
  creds = login()
  function =  function_select()
  while True:
    if function == 'Activate':
        text = "*(Activate Mode)*"
        scan = barcode_scan(text)
        info = get_info(scan, creds)
        comp_id = str(info['computers'][0]['id'])
        activate(comp_id, creds)
    elif function == 'Deactivate':
        text = "*(Deactivate Mode)*"
        scan = barcode_scan(text)
        info = get_info(scan, creds)
        comp_id = str(info['computers'][0]['id'])
        deactivate(comp_id, creds)
        
#Main

if __name__ == "__main__":
    logger("Starting Updater")
    main_loop()
    logger("Updater has exited")
