#!/usr/bin/env python
### Updater.app
### Written by Aaron B.W. Collins assistance and PBridge.py by Andrew Rose
### 03/10/16
### V.1.0

import syslog
import xml.etree.cElementTree as ET
import requests
import PBridge
import requests
import sys
import re
import gspread
import json
import os
from oauth2client.client import SignedJwtAssertionCredentials
import time
import shelve

## TODO:
## Add Manual Function
## Add GSheet entry

exec_path = os.path.dirname(os.path.realpath(__file__))
## Configuration
syslog.openlog('Updator')
json_key = json.load(open("%s/Updater-5ed00fe10ecc.json" % exec_path))
shelfFile = shelve.open('%s/config' % exec_path)

# Variables to not edit
scope = ['https://spreadsheets.google.com/feeds']
google_credentials = SignedJwtAssertionCredentials(
    json_key['client_email'], json_key['private_key'].encode(), scope)
gc = gspread.authorize(google_credentials)
wks = gc.open("Macbook In/Out (Term & Redistribute)")

## Functions
def error(error_message):
    print(error_message)

def login():
    # Gets JSS creds
    authorized = False
    while not authorized:
        authview = """
        # Set window title
        *.title = Updator
        # Introductory text
        txt.type = text
        txt.default = Please Log into Casper
        txt.height = 50
        txt.width = 256
        # Add a text field
        username.type = textfield
        username.label = Username
        username.default = username
        username.width = 256
        username.tooltip = Casper Username

        # Add a password field
        password.type = password
        password.label = Password
        password.width = 256
        password.tooltip = Casper Password

        # Add a cancel button with default label
        cb.type = cancelbutton
        """

        result = PBridge.run(authview)
        if result["cb"] == "1":
            sys.exit(0)
        else:
            user = result["username"]
            pprompt = result["password"]
            creds = (user, pprompt)
            authorized = jsstest(creds)
        if not authorized:
            print("Bad credentials or unauthorized")
    return creds

def jsstest(creds):
    # Tests that jss creds are valid
    r = requests.get('https://zenefits.jamfcloud.com/JSSResource/computers', auth=creds)
    response = (r.status_code)
    print(response)
    return r

def activate_mode(creds, current_wks):
    text = "*(Activate Mode)*"
    scan = barcode_scan(text)
    if scan == 'exit':
        return False
    else:
        info = get_info(scan, creds)
        if len(info['computers']) == 1:
            comp_id = str(info['computers'][0]['id'])
            status = get_status(comp_id, creds)
            name = info['computers'][0]['realname']
            location = info['computers'][0]['building_name']
            returned = activate(comp_id, creds)
            try:
                cell = current_wks.find(scan)
                cellRow = int(cell.row)
                update_wks(scan, name, location, 'Deployed', cellRow, current_wks)
            except Exception:
                list_of_lists = current_wks.get_all_values()
                new_row = len(list_of_lists) + 1
                update_wks(scan, name, location, 'Deployed', new_row, current_wks)
            result_confirm(returned)
        else:
            print(len(info['computers']))
            failed_scan(len(info['computers']))
            logger('Scan Failed![return]Computers expected 1 got %d.' % (len(info['computers'])))
        return True

def deactivate_mode(creds, current_wks):
    text = "*(Deactivate Mode)*"
    scan = barcode_scan(text)
    if scan == 'exit':
        return False
    else:
        info = get_info(scan, creds)
        if len(info['computers']) == 1:
            comp_id = str(info['computers'][0]['id'])
            ram_size = get_ram(comp_id, creds)
            status = get_status(comp_id, creds)
            name = info['computers'][0]['realname']
            location = info['computers'][0]['building_name']
            if ram_size == 4096:
                ram_warning()
            if (status != "Deployed" and status != "Available Stock" and status != "" and status != "Legal Hold"):
                status_warning(status)
                returned = deactivate_without_status(comp_id, creds)
                try:
                    cell = current_wks.find(scan)
                    cellRow = int(cell.row)
                    update_wks(scan, name, location, status, cellRow, current_wks)
                except Exception:
                    list_of_lists = current_wks.get_all_values()
                    new_row = len(list_of_lists) + 1
                    update_wks(scan, name, location, status, new_row, current_wks)
                result_confirm(returned)
            else:
                returned = deactivate(comp_id, creds)
                try:
                    cell = current_wks.find(scan)
                    cellRow = int(cell.row)
                    update_wks(scan, name, location, 'Legal Hold', cellRow, current_wks)
                except Exception:
                    list_of_lists = current_wks.get_all_values()
                    new_row = len(list_of_lists) + 1
                    update_wks(scan, name, location, 'Legal Hold', new_row, current_wks)
                result_confirm(returned)
        else:
            print('Computers expected 1 got %d' % (len(info['computers'])))
            failed_scan(len(info['computers']))
            logger('Scan Failed!\nComputers expected 1 got %d.' % (len(info['computers'])))
        return True

def manual_mode(creds, current_wks):
    manual_status = ''
    while manual_status == '':
        status_info = manual_update(creds)
        manual_status = set_status(status_info)
    text = "Manual Status set to:[return]%s" % manual_status
    scan = barcode_scan(text)
    if scan == 'exit':
        return False
    else:
        info = get_info(scan, creds)
        if len(info['computers']) == 1:
            comp_id = str(info['computers'][0]['id'])
            ram_size = get_ram(comp_id, creds)
            status = get_status(comp_id, creds)
            name = info['computers'][0]['realname']
            location = info['computers'][0]['building_name']
            if ram_size == 4096:
                ram_warning()
            returned = set_manual_status(comp_id, creds, manual_status)
            try:
                cell = current_wks.find(scan)
                cellRow = int(cell.row)
                update_wks(scan, name, location, manual_status, cellRow, current_wks)
            except Exception:
                list_of_lists = current_wks.get_all_values()
                new_row = len(list_of_lists) + 1
                update_wks(scan, name, location, manual_status, new_row, current_wks)
            result_confirm(returned)
            return True
        else:
            print('Computers expected 1 got %d' % (len(info['computers'])))
            failed_scan(len(info['computers']))
            logger('Scan Failed!\nComputers expected 1 got %d.' % (len(info['computers'])))

def office_select():
    try:
        office = shelfFile['office']
    except Exception:
        office = select_office()
        shelfFile['office'] = office
    if office == "AZ":
        current_wks = wks.get_worksheet(1)
    if office == "SF":
        current_wks = wks.get_worksheet(2)
    return current_wks

def get_info_mode(creds, current_wks):
    text = "*(Get Info)*"
    scan = barcode_scan(text)
    if scan == 'exit':
        return False
    else:
        info = get_info(scan, creds)
        if len(info['computers']) == 1:
            comp_id = str(info['computers'][0]['id'])
            status = get_status(comp_id, creds)
            name = info['computers'][0]['realname']
            location = info['computers'][0]['building_name']
            room = info['computers'][0]['room']
            shit_list = get_shitlist(comp_id, creds)
        get_info_screen(scan, name, status, location, room, shit_list)
        return True

def get_info(match, creds):
    # Returns json of computers info
    sendurl = 'https://zenefits.jamfcloud.com/JSSResource/computers/match/%s' % match
    header = {'Accept': 'application/json'}
    r = requests.get(sendurl, auth=creds, headers=header)
    response = r.json()
    # print(response)
    return response

def get_shitlist(comp_id, creds):
    sendurl = 'https://zenefits.jamfcloud.com/JSSResource/computers/id/%s' % comp_id
    header = {'Accept': 'application/json'}
    r = requests.get(sendurl, auth=creds, headers=header)
    response = r.json()
    computer_memberships = response['computer']['groups_accounts']['computer_group_memberships']
    search = re.compile(r'^Shit List:')
    shit_list = []
    for i in computer_memberships:
        mo = search.match(i)
        if mo != None:
            shit_list.append(i)
    return shit_list

def get_ram(comp_id, creds):
    # Returns json of computers ram
    sendurl = 'https://zenefits.jamfcloud.com/JSSResource/computers/id/%s/subset/hardware' % comp_id
    header = {'Accept': 'application/json'}
    r = requests.get(sendurl, auth=creds, headers=header)
    response = r.json()
    return response['computer']['hardware']['total_ram']

def get_status(comp_id, creds):
    # Returns EA named Status
    sendurl = 'https://zenefits.jamfcloud.com/JSSResource/computers/id/%s/subset/extension_attributes' % comp_id
    header = {'Accept': 'application/json'}
    r = requests.get(sendurl, auth=creds, headers=header)
    response = r.json()
    response = response['computer']['extension_attributes']
    for items in response:
        if items['id'] == 11:
            return items['value']

def manual_update(creds):
    # Allows you to set status
    sendurl = 'https://zenefits.jamfcloud.com/JSSResource/computerextensionattributes/id/11'
    header = {'Accept': 'application/json'}
    r = requests.get(sendurl, auth=creds, headers=header)
    response = r.json()
    response = response['computer_extension_attribute']['input_type']['popup_choices']
    return response

def set_manual_status(comp_id, creds, status):
    # Sets status to passed and clears user fields
    sendurl = 'https://zenefits.jamfcloud.com/JSSResource/computers/id/%s' % comp_id
    header = {'Content-Type': 'text/xml'}
    xml = """<?xml version="1.0" encoding="UTF-8"?>
    <computer>
        <location>
            <username></username>
            <real_name></real_name>
            <email_address></email_address>
            <department></department>
        </location>
        <extension_attributes>
            <attribute>
                <name>Status</name>
                <value>%s</value>
            </attribute>
        </extension_attributes>
    </computer>""" % status
    r = requests.put(sendurl, auth=creds, headers=header, data=xml).text
    print(r)
    return r


def activate(comp_id, creds):
    # Sets Status to Deployed
    sendurl = 'https://zenefits.jamfcloud.com/JSSResource/computers/id/%s' % comp_id
    header = {'Content-Type': 'text/xml'}
    xml = """<?xml version="1.0" encoding="UTF-8"?>
    <computer>
        <extension_attributes>
            <attribute>
                <name>Status</name>
                <value>Deployed</value>
            </attribute>
        </extension_attributes>
    </computer>"""
    r = requests.put(sendurl, auth=creds, headers=header, data=xml).text
    return r

def deactivate(comp_id, creds):
    # Sets status to Legal Hold and clears user fields
    sendurl = 'https://zenefits.jamfcloud.com/JSSResource/computers/id/%s' % comp_id
    header = {'Content-Type': 'text/xml'}
    xml = """<?xml version="1.0" encoding="UTF-8"?>
    <computer>
        <location>
            <username></username>
            <real_name></real_name>
            <email_address></email_address>
            <department></department>
        </location>
        <extension_attributes>
            <attribute>
                <name>Status</name>
                <value>Legal Hold</value>
            </attribute>
        </extension_attributes>
    </computer>"""
    r = requests.put(sendurl, auth=creds, headers=header, data=xml).text
    print(r)
    return r

def deactivate_without_status(comp_id, creds):
    #  Clears user fields, but doesn't set status due to error
    sendurl = 'https://zenefits.jamfcloud.com/JSSResource/computers/id/%s' % comp_id
    header = {'Content-Type': 'text/xml'}
    xml = """<?xml version="1.0" encoding="UTF-8"?>
    <computer>
        <location>
            <username></username>
            <real_name></real_name>
            <email_address></email_address>
            <department></department>
        </location>
    </computer>"""
    r = requests.put(sendurl, auth=creds, headers=header, data=xml).text
    print(r)
    return r

def update_wks(scan, name, location, status, row, current_wks):
    date = time.strftime("%m/%d/%y")
    range_val = 'A%d:E%d' % (row, row) 
    cell_list = current_wks.range(range_val) 
    cell_values = ['{0}'.format(date),'{0}'.format(name),'{0}'.format(scan),'{0}'.format(location),'{0}'.format(status)]
    for i, val in enumerate(cell_values):
        cell_list[i].value = val
    current_wks.update_cells(cell_list)

def result_confirm(result_value):
    # Returns xml return after call is made
    result_view="""
    *.title = Updator
    # Introductory text
    txt.type = text
    """
    result_view += "\ntxt.default = %s" % result_value
    result_view +="""
    txt.height = 50
    txt.width = 256
    """
    result = PBridge.run(result_view)

def failed_scan(number):
    # Produces Pashua that asset was not found
    failed_view="""
    *.title = Updator
    # Introductory text
    txt.type = text
    """
    failed_view += "\ntxt.default = Scan Failed![return]Computers expected 1 got %d.[return]Please finish manually!\n" % number
    failed_view += """
    txt.height = 50
    txt.width = 256
    """
    result = PBridge.run(failed_view)

def barcode_scan(text):
    # Asks for asset barcode using Pashua
    barcode_vaild = 0
    while not barcode_vaild:
        barcode_view = """
        *.title = Updator - JSS Update
        text.type = text
        """
        barcode_view += "\ntext.default = %s[return]Please Scan Barcode\n" % text
        barcode_view += """
        text.height = 50
        text.width = 256
        barcode.type = textfield
        barcode.label = 
        barcode.width = 256
        cb.type = cancelbutton
        b.type = button
        b.label = Go Back

        """
        result = PBridge.run(barcode_view)
        print(result)
        if result["cb"] == "1":
            logger("User Canceled")
            sys.exit(0)
        if result['b'] == "1":
            barcode_vaild = True
            result['barcode'] = 'exit'
        else:
            r = re.compile(r'[0-9]{8}')
            rfind = r.findall(result['barcode'])
            if rfind:
                barcode_vaild = 1
            else:
                failed_scan(0)
    return result['barcode']

def ram_warning():
    # Warns with Ram is 4GB
    ram_view="""
    *.title = Updator
    # Introductory text
    txt.type = text
    txt.default = Ram is 4GB please take out of active!
    txt.height = 50
    txt.width = 256
    """
    result = PBridge.run(ram_view)

def status_warning(status):
    # Warns that status idn't deployed during deactivation
    status_view="""
    *.title = Updator
    # Introductory text
    txt.type = text
    """
    status_view += "\ntxt.default = Status is currently: %s.[return]Expecting \"Deployed\". Please Investigate!" % status
    status_view += """
    txt.height = 50
    txt.width = 256
    """
    result = PBridge.run(status_view)

def set_status(status):
    #Creates Popup for status
    status_view="""
    *.title = Updator
    # Introductory text
    txt.type = text
    txt.default = What status would you like to set?
    txt.height = 50
    txt.width = 256
    # Add a popup menu
    pop.type = popup
    pop.label = Status
    pop.width = 256"""
    for index, stats in enumerate(status):
        status_view += "\npop.option = %s" % stats
    status_view += "\ncb.type = cancelbutton"
    selection = PBridge.run(status_view)
    if selection['cb'] == "1":
        sys.exit(0)
    for index, stats in enumerate(status):
        if stats == selection["pop"]:
            selected = index
    return status[selected]

def function_select():
    # Allows user to select function
    function_view="""
    *.title = Updator
    # Introductory text
    txt.type = text
    txt.default = Please select which function you would like to perform
    txt.height = 50
    txt.width = 256
    # Add a popup menu
    pop.type = popup
    pop.label = Function
    pop.width = 256
    pop.option = Activate
    pop.option = Deactivate
    pop.option = Manual
    pop.option = Get Info
    pop.default = Activate
    # Add a cancel button with default label
    cb.type = cancelbutton

    """
    selection = PBridge.run(function_view)
    function = ""
    if selection["cb"] == "1":
        sys.exit(0)
    elif selection["pop"] == "Activate":
        function = selection["pop"]
    elif selection["pop"] == "Deactivate":
        function = selection["pop"]
    elif selection["pop"] == "Manual":
        function = selection["pop"]
    elif selection["pop"] == "Get Info":
        function = selection["pop"]
    return function

def select_office():
    select_office_view = """
    *.title = Updator
    # Introductory text
    txt.type = text
    txt.default = Please select which office you are based
    txt.height = 50
    txt.width = 256
    # Add a popup menu
    pop.type = popup
    pop.label = Location
    pop.width = 256
    pop.option = SF
    pop.option = AZ
    pop.default = SF
    # Add a cancel button with default label
    cb.type = cancelbutton
    """
    selection = PBridge.run(select_office_view)
    office_location = ""
    if selection['cb'] == "1":
        sys.exit(0)
    elif selection["pop"] == "SF":
        office_location = selection["pop"]
    elif selection["pop"] == "AZ":
        office_location == selection["pop"]
    return office_location

def get_info_screen(scan, name, status, location, room, shit_list):
    shit = ""
    for i in shit_list:
        shit += '[return]%s' % i
    room_if = ""
    if room != "":
        room_if = "[return]Room: %s" % room
    get_info_view="""
    *.title = Updator
    # Introductory text
    txt.type = text
    txt.default = Asset: %s[return]Name: %s[return]Status: %s[return]Location: %s%s[return]%s
    txt.height = 50
    txt.width = 256
    """ % (scan, name, status, location, room_if, shit)
    result = PBridge.run(get_info_view)

def logger(message):
    syslog.syslog(syslog.LOG_ALERT, message)

def process_loop(creds, current_wks):
    """
    Docstring incoming
    """
    function = function_select()
    keep_going = True
    while keep_going:
        if function == 'Activate':
            keep_going = activate_mode(creds, current_wks)
        elif function == 'Deactivate':
            keep_going = deactivate_mode(creds, current_wks)
        elif function == 'Manual':
            keep_going = manual_mode(creds, current_wks)
        elif function == 'Get Info':
            keep_going = get_info_mode(creds, current_wks)

def main_loop():
    manual_status = ''
    creds = login()
    current_wks = office_select()
    while True:
        process_loop(creds, current_wks)




# Testing
# barcode_scan('')

# Main

if __name__ == "__main__":
    logger("Starting Updator")
    main_loop()
    logger("Updator has exited")
